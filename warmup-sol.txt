
First note that, excluding ACK FIN, the client only sends a total of 24 ACKs despite the server sending over all 25 lines during lines 76-79 of the server.py code. From this we can infer that either a line packet didn't reach the client or an ACK didn't reach the server. However, since additionally after ACK 5, the acknowledgment of having received Line 6, the client only sends 'ACK 5' we can infer that the 7th line did not reach the client. This is because if it instead reached but was corrupted we should have still received an 'ACK 5' for that packet, and secondly, after line 6 was acknowledged only 'ACK 5's were sent to the server indicating that while other lines were received the client was not able to process them due to all packets having an sequence not equivalent to the next required sequence that only line 7 should have. The server code could not deal with this issue as it does not process the ACKs it receives. From reading the code, even if the server received an repeated ACK or did not receive an ACK after some time, both of which signal packet loss, it would simply ignore the issue as it has no ACK detection and RTX code to tell if the file transfers were successful.